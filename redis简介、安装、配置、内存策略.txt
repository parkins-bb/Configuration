简单介绍  
Redis是简介  
    Redis 是完全开源免费的，遵守BSD协议，是一个高性能(NOSQL)的key-value数据库,Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。  
☆☆☆Redis 与其他 key - value 缓存产品有以下三个特点：  
 1.Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。  
 2.Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。  
 3.Redis支持数据的备份，集群等高可用功能。  
 特点:  
 ●性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s。  
 ●丰富的数据类型 – Redis支持的类型 String, List, Hash, Set 及 Ordered Set 数据类型操作。  
 ●原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。  
 ●丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。  

Redis是一个简单的，高效的，分布式的，基于内存的缓存工具。   
架设好服务器后，通过网络连接（类似数据库），提供Key－Value式缓存服务。  
简单，是Redis突出的特色。 简单可以保证核心功能的稳定和优异。   

 Redis总结  
 ●redis单个key 存入512M大小  
 ●redis支持多种类型的数据结构(string,list,hash.set.zset)  
 ●redis 是单线程   原子性      
 ●redis可以持久化  因为使用了 RDB和AOF机制    
 ●redis支持集群   而且redis 支持库(0-15) 16个库   
 ●redis 还可以做消息队列  比如聊天室  IM   

 企业级开发中:可以用作数据库、缓存(热点数据（经常会被查询，但是不经常被修改或者删除的数据)和消息中间件等大部分功能。  

优点：   
 1. 丰富的数据结构。    
 2.高速读写，redis使用自己实现的分离器，代码量很短，没有使用lock（MySQL），因此效率非常高。  

缺点：   
 1. 持久化。Redis直接将数据存储到内存中，要将数据保存到磁盘上，Redis可以使用两种方式实现持久化过程。定时快照（snapshot）：每隔一段时间将整个数据库写到磁盘上，每次均是写全部数据，代价非常高。第二种方式基于语句追加（aof）：只追踪变化的数据，但是追加的log可能过大，同时所有的操作均重新执行一遍，回复速度慢。   
 2. 耗内存，占用内存过高。  


ECS-Ubuntu安装、配置redis、内存策略  
一、redis的安装  
 下载：  
   wget http://download.redis.io/releases/redis-5.0.8.tar.gz  
 解压：   
   tar zxvf redis-5.0.8.tar.gz -C /opt  
   cd  /opt/redis-5.0.8  
 编译：若无gcc先安装gcc（redis C语言编写）  
   make   
 安装：  
   make PREFIX=/usr/local/redis install     
 启动：  
   cd /usr/local/redis  
   ./bin/redis-server 启动服务器  
   ./bin/redis-cli 启动客户端
 测试：
   客户端输入ping出现PONG 成功

二、redis的配置文件
  
 复制配置文件：
   cp /opt/redis-5.0.8/redis.conf /usr/local/redis/
  
redis.conf配置文件：

☆☆☆1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程
   daemonize yes #服务在后台运行

2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定
    pidfile /var/run/redis.pid

☆☆☆3. 指定Redis监听端口，默认端口为6379，为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字
    port 6379

☆☆☆4. 绑定的主机地址 默认只能本机访问。
   (注释掉bind:127.0.0.1）和修改保护模式为no让远程访问
   #bind 127.0.0.1 
    protected-mode no

5.当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能
    timeout 300

6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose
    loglevel verbose

7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
    logfile stdout

8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id
    databases 16

☆☆☆9. 指定在多长时间内，有多少次更新操作，就将内存中数据同步到硬盘数据文件，可以多个条件配合。持久化数据的保存方式
    save <seconds> <changes>
    Redis默认配置文件中提供了三个条件：
    save 900 1
    save 300 10
    save 60 10000
    分别表示900秒（15分钟）内有1个更改，就做一次内存的持久化，300秒（5分钟）内有10个key更改，做一次持久化操作 ，以及60秒内有10000个key更改。
    内存到硬盘同步过程

10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大
    rdbcompression yes

---中间10个配置---

☆☆☆11. 指定本地数据库文件名，默认值为dump.rdb
    dbfilename dump.rdb #数据文件在硬盘上的名字

12. 指定本地数据库存放目录
    dir ./

13. 设置当本机为slave服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步
    slaveof <masterip> <masterport> #主从配置

14. 当master服务设置了密码保护时，slav服务连接master的密码
    masterauth <master-password>

☆☆☆15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭
    #requirepass foobared

16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
    maxclients 128

17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区
    #maxmemory <bytes> #内存空间够大改大点，如把内存512G改为1024G

18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no
    appendonly no

19. 指定更新日志文件名，默认为appendonly.aof
     appendfilename appendonly.aof

20. 指定更新日志条件，共有3个可选值： 
    no：表示等操作系统进行数据缓存同步到磁盘（快） 
    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） 
    everysec：表示每秒同步一次（折中，默认值）
    appendfsync everysec


---结尾10个配置---

21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中）
     vm-enabled no

22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享
     vm-swap-file /tmp/redis.swap

23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
     vm-max-memory 0

24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值
     vm-page-size 32

25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。
     vm-pages 134217728

26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
     vm-max-threads 4

27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
    glueoutputbuf yes

28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
    hash-max-zipmap-entries 64
    hash-max-zipmap-value 512

29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）
    activerehashing yes

30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
    include /path/to/local.conf

三、☆☆☆redis的内存维护策略☆☆☆：

redis作为优秀的中间缓存件，时常会存储大量的数据，即使采取了集群部署来动态扩容，也应该即使的整理内存，维持系统性能。

在redis中有两种解决方案，

一是为数据设置超时时间，
 set k1 v1
 ttl k1
 输出 -1 表示永久有效
 ☆设置过期时间
 expire key time(以秒为单位)--这是最常用的方式
 setex(String key ,int seconds,String value)--字符串独有的方式
 ● 除了字符串自己独有的设置过期是假的方法外，其他方法都需要依靠expire方法来设置时间  
 ● 如果没有设置时间，那缓存就是永不过期
 ● 如果设置了过期时间，之后又想让缓存永不过期，使用persist key

如何保证内存不会溢出，服务不发生宕机：
ZERO、Redis内存不足的缓存淘汰策略
二是采用LRU算法动态将不用的数据删除。
 内存管理的一种页面置换算法，对于在内存中但又不用的数据块（内存块）叫做LRU，操作系统会根据哪些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。

 1.volatile-lru：设定超时时间的数据中,删除最不常使用的数据.

 2.allkeys-lru：查询所有的key中最近最不常使用的数据进行删除，这是应用最广泛的策略.

 3.volatile-random：在已经设定了超时的数据中随机删除.

 4.allkeys-random：查询所有的key,之后随机删除.

 5.volatile-ttl：查询全部设定超时时间的数据,之后排序,将马上将要过期的数据进行删除操作.

 6.noeviction：如果设置为该属性,则不会进行删除操作,如果内存溢出则报错返回.

 7.volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键

 8.allkeys-lfu：从所有键中驱逐使用频率最少的键
 内存策略:https://www.jianshu.com/p/c8aeb3eee6bc
四、自定义配置redis
 1、进入对应的安装目录 /usr/local/redis
修改 redis.conf 配置文件   vim redis.conf   (进入命令模式  通过/内容  查找相应字符串）

 2、Redis配置默认必须修改： 
daemonize no  修改为 daemonize yes 
bind 127.0.01 注释掉  
requirepass 设置密码   
 redis采用的是单进程多线程的模式。当redis.conf中选项daemonize设置成yes时，代表开启守护进程模式。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程。但当daemonize选项设置成no时，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。
服务端开发的大部分应用都是采用后台运行的模式 

五、Redis启动和关闭：
 cd /usr/local/redis
 服务端启动：
 ./bin/redis-server ./redis.conf

 ☆☆☆客户端启动：
 本地客户端登录
 用redis-cli 密码登陆（redis-cli -a  password） 
 无密码：.redis-cli

 远程服务上执行命令
 如果需要在远程 redis 服务上执行命令，同样我们使用的也是 redis-cli 命令。

 语法：
 redis-cli -h host -p port -a password
 redis-cli –h IP地址 –p 端口 –a 密码


 ☆☆☆Redis关闭
 第一种关闭方式：（断电、非正常关闭。容易数据丢失）
 查询PID   ps -ef | grep -i redis
 kill -9 PID

 第二种关闭方式（正常关闭、数据保存）
 ./bin/redis-cli shutdown     关闭redis服务，通过客户端进行shutdown

 如果redis设置了密码，需要先在客户端通过密码登录，再进行shutdown即可关闭服务端

 通过 ps –ef | grep –i redis  查看当前进程：











 

   